import java.util.*;
class Main
{
        static int graph[][];
	static ArrayList<Integer> nb=new ArrayList<>();
	static List<List<Integer>> res=new ArrayList<>();
        public static void addEdge(int a,int b){
            graph[a][b]=1;
            graph[b][a]=1;
        }
	public static void main (String[] args)
	{
		Scanner s=new Scanner(System.in);
		int n=s.nextInt();
		graph=new int[n][n];
		int m=s.nextInt();
		for(int i=0;i<m;i++){
		    int a=s.nextInt();
		    int b=s.nextInt();
		    addEdge(a,b);
		}
		int src=s.nextInt();
		int des=s.nextInt();
		boolean v[]=new boolean[n];
	    ArrayList<Integer> list=new ArrayList<>();
		list.add(src);
		bfs(src,-1,v,des,n,list);
		int min=Integer.MAX_VALUE;
		for(int i=0;i<nb.size();i++){
	        Set<Integer> temp=new HashSet<>();
		    for(int j=i;j<nb.size();j++){
		        for(int k=0;k<res.size();k++){
		            if(res.get(k).contains(nb.get(j)))
		            temp.add(k);
		        }
		        if(temp.size()==res.size()){
		            if(min>j-i+1)
		            min=j-i+1;
		            break;
		        }
		    }
		}
		System.out.println(min);
	}
	public static void bfs(int index,int parent,boolean v[],int des,int n,ArrayList<Integer> list){
	    if(index==des){
	        if(!nb.contains(parent))
	        nb.add(parent);
	        res.add(new ArrayList<>(list));
	        return;
	    }
	    v[index]=true;
	    for(int i=0;i<n;i++){
	        if(!v[i] && graph[index][i]==1){
	            list.add(i);
	            bfs(i,index,v,des,n,list);
	            list.remove(list.size()-1);
	            v[i]=false;
	        }
	    }
	}
}
