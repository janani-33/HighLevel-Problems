class Solution{
    long len=-1;
    public long largesSumCycle(int N, int Edge[]){
        boolean visited[]=new boolean[N];
        boolean st[]=new boolean[N];
        for(int i=0;i<N;i++)
        cyclic(i,Edge,visited,st,new ArrayList<Integer>());
        return len;
    }
    void cyclic(int i,int edge[],boolean[] visited,boolean[] st,ArrayList<Integer> l){
        if(i==-1)
        return;
        if(st[i]){
            int p=l.indexOf(i);
            if(p!=-1){
                int sum=0;
                for(int c=p;c<l.size();c++)
                sum+=l.get(c);
                if(sum>len)
                len=sum;
            }
            return;
        }
        if(visited[i])
        return;
        visited[i]=true;
        st[i]=true;
        l.add(i);
        cyclic(edge[i],edge,visited,st,l);
        st[i]=false;
        l.remove(l.size()-1);
        return;
    }
}
