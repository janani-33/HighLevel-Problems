class Solution
{
    HashMap<String,Integer> map=new HashMap<>();
    ArrayList<ArrayList<String>> res=new ArrayList<>();
    public void checkseq(String st,String word,ArrayList<String> seq){
        if(word.equals(st)){
            ArrayList<String> temp=new ArrayList<>(seq);
            Collections.reverse(temp);
            res.add(temp);
            return;
        }
        int steps=map.get(word);
        int s=word.length();
        for(int i=0;i<s;i++){
            for(char ch='a';ch<='z';ch++){
                String ns=word.substring(0,i)+ch+word.substring(i+1,s);
                if(map.containsKey(ns) && map.get(ns)+1==steps){
                    seq.add(ns);
                    checkseq(st,ns,seq);
                    seq.remove(seq.size()-1);
                }
            }
        }
    }
    public ArrayList<ArrayList<String>> findSequences(String startWord, String targetWord, String[] wordList)
    {
        Set<String> set=new HashSet(Arrays.asList(wordList));
        if(!set.contains(targetWord))
        return res;
        Queue<String> q=new LinkedList<>();
        q.add(startWord);
        map.put(startWord,1);
        set.remove(startWord);
        int s=startWord.length();
        while(!q.isEmpty()){
            String word=q.remove();
            int steps=map.get(word);
            if(word.equals(targetWord))
            break;
            for(int i=0;i<s;i++){
                for(char ch='a';ch<='z';ch++){
                    String ns=word.substring(0,i)+ch+word.substring(i+1,s);
                    if(set.contains(ns)){
                        q.add(ns);
                        set.remove(ns);
                        map.put(ns,steps+1);
                    }
                }
            }
        }
        ArrayList<String> seq=new ArrayList<>();
        seq.add(targetWord);
        if(map.containsKey(targetWord))
        checkseq(startWord,targetWord,seq);
        return res;
    }
}
